
@article{danvy_there_2005,
	title = {There and {Back} {Again}},
	url = {http://brics.dk/RS/05/3/BRICS-RS-05-3.pdf},
	urldate = {2017-04-06},
	author = {Danvy, Olivier and Goldberg, Mayer},
	year = {2005},
	file = {[PDF] brics.dk:files/2358/Danvy and Goldberg - 2005 - There and Back Again.pdf:application/pdf}
}

@article{bird_using_1984,
	title = {Using {Circular} {Programs} to {Eliminate} {Multiple} {Traversals} of {Data}},
	volume = {21},
	issn = {0001-5903},
	url = {http://dx.doi.org/10.1007/BF00264249},
	doi = {10.1007/BF00264249},
	abstract = {This paper describes a technique for transforming functional programs that repeatedly traverse a data structure into more efficient alternatives that do not. The transformation makes essential use of lazy evaluation and local recursion (such as provided by letrec, or its equivalent) to build a circular program that, on one pass over the structure, determines the effects of the individual traversals and then combines them.},
	language = {en},
	number = {3},
	urldate = {2018-02-16},
	journal = {Acta Inf.},
	author = {Bird, R. S.},
	month = oct,
	year = {1984},
	pages = {239--250},
	file = {10.1007%2Fbf00264249.pdf:files/3281/10.1007%2Fbf00264249.pdf:application/pdf;Snapshot:files/3238/BF00264249.html:text/html}
}

@inproceedings{voigtlander_using_2002,
	address = {New York, NY, USA},
	series = {{ASIA}-{PEPM} '02},
	title = {Using {Circular} {Programs} to {Deforest} in {Accumulating} {Parameters}},
	isbn = {978-1-58113-458-2},
	url = {http://doi.acm.org/10.1145/568173.568187},
	doi = {10.1145/568173.568187},
	abstract = {Functional languages allow a modular programming style by function composition, which however can lead to inefficient runtime behavior due to production and consumption of intermediate results.We present a new mechanizable transformation technique for removing intermediate data structures in the composition of two functions from a class of recursive functions with accumulating parameters, for which classical deforestation techniques fail.In order to avoid multiple traversals of the input data structure, the composition algorithm produces circular programs that make essential use of lazy evaluation and local recursion.The resulting programs are simplified using a post-processing phase presented in the paper.},
	urldate = {2018-02-16},
	booktitle = {Proceedings of the {ASIAN} {Symposium} on {Partial} {Evaluation} and {Semantics}-based {Program} {Manipulation}},
	publisher = {ACM},
	author = {Voigtländer, Janis},
	year = {2002},
	keywords = {accumulating parameters, circular programs, deforestation, intermediate data structures, lazy composition, lazy evaluation, multiple traversals, program transformation, tupling},
	pages = {126--137},
	file = {ACM Full Text PDF:files/3242/Voigtländer - 2002 - Using Circular Programs to Deforest in Accumulatin.pdf:application/pdf}
}

@article{van_gilst_new_1995,
	title = {A new programming technique for lazy functional languages},
	volume = {24},
	issn = {0167-6423},
	url = {http://www.sciencedirect.com/science/article/pii/0167642394000249},
	doi = {10.1016/0167-6423(94)00024-9},
	abstract = {In this paper we present a new programming technique for lazy functional programming languages. The technique is embedded in a programming methodology which is based on divide and conquer: the division of problems into subproblems. Such a division will be represented by a call graph. A class of program schemes, which implement call graphs, is derived based on Johnsson's approach to attribute evaluation in attribute grammars. The key idea is to consider the passing of arguments to functions and the return of results by functions in a call graph as the propagation of inherited and synthesized attributes, respectively, in an attribute grammar. The new technique is illustrated by several small examples and a case study: the design and implementation of a compiler generator.},
	number = {1},
	urldate = {2018-02-16},
	journal = {Science of Computer Programming},
	author = {van Gilst, F. A. and van den Broek, P. M.},
	month = feb,
	year = {1995},
	pages = {63--81},
	file = {ScienceDirect Full Text PDF:files/3245/van Gilst and van den Broek - 1995 - A new programming technique for lazy functional la.pdf:application/pdf;ScienceDirect Snapshot:files/3244/0167642394000249.html:text/html}
}